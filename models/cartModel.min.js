const{ObjectId:ObjectId}=require("mongodb"),Product=require("./product"),{getDb:getDb}=require("../util/database"),calcTotalPrice=products=>{let totalPrice=0;return products.reduce((preVal,curVal)=>{totalPrice+=curVal.price*curVal.qty},0),totalPrice};module.exports=class Cart{static addToCart(id){const db=getDb();db.collection("cart").find().toArray().then(cartItems=>{let cart={products:[],totalPrice:0};cartItems.length>0&&(console.log(cartItems),cart={...cartItems},console.log(cart))}).catch(err=>console.log(err))}static getFromCart(cb){const db=getDb();db.collection("cart").find().toArray().then(products=>cb(products)).catch(err=>console.log(err))}static filterCart(id){const db=getDb();db.collection("cart").find().toArray().then(carts=>{carts.products=carts.products.filter(product=>product.id!==id),carts.totalPrice=calcTotalPrice(carts.products),db.collection("cart").insertOne(carts)}).catch(err=>console.log(err))}static delFromCart(id){getfromFile(carts=>{const cartItemIndex=carts.products.findIndex(prod=>prod.id===id),cartItem=carts.products[cartItemIndex];cartItem.qty<=1?carts.products=carts.products.filter(prod=>prod.id!==id):(cartItem.qty-=1,carts.products[cartItemIndex]=cartItem),carts.cart=calcTotalPrice(carts.products),fs.writeFile(p,JSON.stringify(carts),(err,data)=>{console.log(err)})})}};